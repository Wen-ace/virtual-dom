<script>

    var i = j = 0;
    var times = 10000;
    var time = new Date().getTime();
    function setI() {
        var timerId = setInterval(function () {
            i++;
            if (i > times) {
                console.log( "IntervalTime === > " + (new Date().getTime() - time));
                clearInterval(timerId);
            }
        },20);
    }
    function setT() {
        setTimeout(function () {
            j++;
            if (j > times) {
                console.log( "TimeoutTime ==== > " + (new Date().getTime() - time));
            }else {
                setT();
            }
        },20)
    }
    setT();
    setI();
    /**
     * IntervalTime === > 219017
     * TimeoutTime ==== > 228799
     * */
</script>

结论：
    setTimeout 相比 setInterval更耗时。
原因：
    setTimeout是JavaScript引擎执行后再设置新的setTimeout定时, 假定上一个回调处理完到下一个回调开始处理为一个时间间隔,理论两个setTimeout回调执行时间间隔>=20ms .
    自setInterval设置定时后,定时触发线程就会源源不断的每隔20ms产生异步定时事件并放到任务队列尾,理论上两个setInterval回调执行时间间隔<=20ms.
详情：http://www.laruence.com/2009/09/23/1089.html
